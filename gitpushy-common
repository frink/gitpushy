#!/bin/bash

# Git Pushy Simple Build Deployment Framework
#
# @link http://gitpushy.com
# @author Micon Frink & Friends <frink@frinknet.com>
#
# @copyright (c) 2013 - FRINKnet and the Expatriated Lemurs of Borneo
# Licenced under the MIT license see - http://lemurs.mit-license.org/

gitpushy-branch-name() {
	local branch_name=$(git symbolic-ref -q HEAD)

	echo ${branch_name##refs/heads/}
}

gitpushy-build() {
	# check pushy status
	[ $PUSHY_STATUS != 0 ] && return $PUSHY_STATUS

	echo "GitPushy - Building $PUSHY_REPO:$PUSHY_BRANCH at $HOSTNAME:$PUSHY_BUILD_DIR"

	# build rsync command (complex because we honor gitattributes
	PUSHY_SYNC="rsync -a --exclude='.git*' $(gitpushy-cat .gitattributes|grep export-ignore|cut -d' ' -f1|tr '\n' '\0' | xargs -0 -I {} echo "--exclude='{}'" | tr '\n' ' ')"

	# Rsync files to PUSHY_STAGE_DIR
	if [ $PUSHY_REMOTE = 0 ]; then
		PUSHY_SYNC="$PUSHY_SYNC $PUSHY_BUILD_DIR $PUSHY_STAGE_DIR"
	else
		PUSHY_SYNC="$PUSHY_SYNC --rsh='ssh -p$PUSHY_PORT' $PUSHY_BUILD_DIR $PUSHY_USER@$PUSHY_SERVER:$PUSHY_STAGE_DIR"
	fi

	# prepare pushy build script
	echo "$PUSHY_ENV" > gitpushy-$1-build.command
	echo "PUSHY_TRIGGER='$1'" >> gitpushy-$1-build.command
	echo "PUSHY_STATUS='$PUSHY_STATUS'" >> gitpushy-$1-build.command
	echo "[ ! -d '$PUSHY_BUILD_DIR' ] && echo 'directory does not exist - $PUSHY_BUILD_DIR' >&2 && exit 404" >> gitpushy-$1-build.command
	echo "cd $PUSHY_BUILD_DIR" >> gitpushy-$1-build.command
	gitpushy-script build $1 >> gitpushy-$1-build.command
	echo "$PUSHY_SYNC" >> gitpushy-$1-build.command
	echo "exit $PUSHY_STATUS" >> gitpushy-$1-build.command

	# show commands run if verbosity is set
	[ $PUSHY_VERBOSE != 0 ] && cat gitpushy-$1-build.command | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-build: {}"

	# run pushy build srcipts
	(cat gitpushy-$1-build.command | bash) 1> >(tee gitpushy-$1-build.output) 2> >(tee gitpushy-$1-build.error) | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - .gitpushy-$1-build - {}"

	# capture execution status
	PUSHY_STATUS=${PIPESTATUS[0]}

	[ -s gitpushy-$1-build.error ] && PUSHY_STATUS=500

	# return pushy status
	return $PUSHY_STATUS
}

gitpushy-stage() {
	# check pushy status
	[ $PUSHY_STATUS != 0 ] && return $PUSHY_STATUS 

	echo "GitPushy - Staging $PUSHY_REPO:$PUSHY_BRANCH in $PUSHY_SERVER:$PUSHY_STAGE_DIR"

	# prepare pushy stage script
	echo "$PUSHY_ENV" > gitpushy-$1-stage.command
	echo "PUSHY_TRIGGER='$1'" >> gitpushy-$1-stage.command
	echo "PUSHY_STATUS='$PUSHY_STATUS'" >> gitpushy-$1-stage.command
	echo "[ ! -d '$PUSHY_STAGE_DIR' ] && echo 'directory does not exist - $PUSHY_STAGE_DIR' >&2 && exit 404" >> gitpushy-$1-stage.command
	echo "cd $PUSHY_STAGE_DIR" >> gitpushy-$1-stage.command
	gitpushy-script stage $1 >> gitpushy-$1-stage.command
	echo "exit $PUSHY_STATUS" >> gitpushy-$1-stage.command

	# show commands run if verbosity is set
	[ $PUSHY_VERBOSE != 0 ] && cat gitpushy-$1-stage.command | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-stage: {}"

	# run pushy stage scripts
	if [ $PUSHY_REMOTE = 0 ]; then 
		(cat gitpushy-$1-stage.command | bash) 1> >(tee gitpushy-$1-stage.output) 2> >(tee gitpushy-$1-stage.error) | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - .gitpushy-$1-stage - {}"
	else
		(cat gitpushy-$1-stage.command | ssh -p $PUSHY_PORT $PUSHY_USER@$PUSHY_SERVER bash) 1> >(tee gitpushy-$1-stage.output) 2> >(tee gitpushy-$1-stage.error) | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - .gitpushy-$1-stage - {}"
	fi

	# capture exit status
	PUSHY_STATUS=${PIPESTATUS[0]}
	[ -s gitpushy-$1-stage.error ] && PUSHY_STATUS=500

	# return pushy status
	return $PUSHY_STATUS
}

gitpushy-deploy() {
	# check pushy status
	[ $PUSHY_STATUS != 0 ] && return $PUSHY_STATUS 

	echo "GitPushy - Deploying $PUSHY_REPO:$PUSHY_BRANCH to $PUSHY_SERVER:$PUSHY_DEPLOY_DIR"

	#prepare pushy deploy script
	echo "$PUSHY_ENV" > gitpushy-$1-deploy.command
	echo "PUSHY_TRIGGER='$1'" >> gitpushy-$1-deploy.command
	echo "PUSHY_STATUS='$PUSHY_STATUS'" >> gitpushy-$1-deploy.command
	echo "[ ! -d '$PUSHY_DEPLOY_DIR' ] && echo 'directory does not exist - $PUSHY_DEPLOY_DIR' >&2 && exit 404" >> gitpushy-$1-deploy.command
	echo "rm -rf $PUSHY_DEPLOY_DIR" >> gitpushy-$1-deploy.command
	echo "rsync -a --exclude='gitpushy-*' $PUSHY_STAGE_DIR $PUSHY_DEPLOY_DIR" >> gitpushy-$1-deploy.command
	echo "cd $PUSHY_DEPLOY_DIR" >> gitpushy-$1-deploy.command
	gitpushy-script deploy $1 >> gitpushy-$1-deploy.command
	echo "exit $PUSHY_STATUS" >> gitpushy-$1-deploy.command

	# show commands run if verbosity is set
	[ $PUSHY_VERBOSE != 0 ] && cat gitpushy-$1-deploy.command | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-stage: {}"

	# run pushy deploy scripts
	if [ $PUSHY_REMOTE = 0 ]; then
		(cat gitpushy-$1-deploy.command | bash) 1> >(tee gitpushy-$1-deploy.output) 2> >(tee gitpushy-$1-deploy.error) | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - .gitpushy-$1-deploy - {}"
	else
		(cat gitpushy-$1-deploy.command | ssh -p $PUSHY_PORT $PUSHY_USER@$PUSHY_SERVER bash) 1> >(tee gitpushy-$1-deploy.output) 2> >(tee gitpushy-$1-deploy.error) | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - .gitpushy-$1-deploy - {}"
	fi

	# capture exit status
	PUSHY_STATUS=${PIPESTATUS[0]}
	[ -s gitpushy-$1-deploy.error ] && PUSHY_STATUS=500

	# return pushy status
	return $PUSHY_STATUS
}

gitpushy-trigger() {
	# check pushy status
	[ $PUSHY_STATUS != 0 ] && return $PUSHY_STATUS

	# prepare pushy config script
	PUSHY_CONFIG="$(gitpushy-script config $1)"
	PUSHY_CUSTOM="$(gitpushy-script custom $1)"
	PUSHY_TRIGGER="$1"

	# return 404 if script doesnt exist
	[ -z "$PUSHY_CONFIG$PUSHY_CUSTOM" ] && return 404

	# run config scripts for deployment
	eval "$PUSHY_CONFIG" 1> >(tee gitpushy-$1-config.output) 2> >(tee gitpushy-$1-config.error)> >(tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-config: {}")

	# capture exit status
	PUSHY_STATUS=$?
	[ -s gitpushy-$1-config.error ] && PUSHY_STATUS=500

	# set pushy remote vs local
	[ "$PUSHY_SERVER" != "$(hostname)" ] && PUSHY_REMOTE=1

	# setup pushy environment variables
	export PUSHY_ENV="
	PUSHY_DEPLOY_DIR='$PUSHY_DEPLOY_DIR/'
	PUSHY_STAGE_DIR='$PUSHY_STAGE_DIR'
	PUSHY_BUILD_DIR='$PUSHY_BUILD_DIR'
	PUSHY_VERBOSE='$PUSHY_VERBOSE'
	PUSHY_SERVER='$PUSHY_SERVER'
	PUSHY_REMOTE='$PUSHY_REMOTE'
	PUSHY_BRANCH='$PUSHY_BRANCH'
	PUSHY_PORT='$PUSHY_PORT'
	PUSHY_USER='$PUSHY_USER'
	PUSHY_REPO='$PUSHY_REPO'
	"

	# show commands run if verbosity is set
	[ $PUSHY_VERBOSE != 0 ] && echo "$PUSHY_CONFIG" | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-config: - {}"

	# show environment if verbosity is set
	[ $PUSHY_VERBOSE != 0 ] && echo "$PUSHY_ENV" | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-environment - {}"

	# run deployment scripts
	if [ $PUSHY_STATUS != 0 ]; then
		local DEPLOYMENT_RUN="$1 config"
	elif [ -n "$PUSHY_CUSTOM" ]; then
		local DEPLOYMENT_RUN="$1 custom script"

		echo "GitPushy - Calling $DEPLOYMENT_RUN"
		echo "----------"

		# show commands run if verbosity is set
		[ $PUSHY_VERBOSE != 0 ] && echo "$PUSHY_CUSTOM" | tr '\n' '\0' | xargs -0 -I {} echo "GitPushy - gitpushy-$1-custom: {}"

		# run custom script
		(eval "$PUSHY_CUSTOM" 1> >(tee gitpushy-$1-custom.output) 2> >(tee gitpushy-$1-custom.error))

		# capture exit status
		PUSHY_STATUS=$?
		[ -s gitpushy-$1-custom.error ] && PUSHY_STATUS=500

		echo "----------"
	elif [ -n "$PUSHY_DEPLOY_DIR" ]; then
		local DEPLOYMENT_RUN="$1 deployment"

		echo "GitPushy - Calling $DEPLOYMENT_RUN"

		gitpushy-build $1
		gitpushy-stage $1
		gitpushy-deploy $1
	else
		local DEPLOYMENT_RUN="$1 config"

		echo "GitPushy - Invalid config no deploy directory"

		PUSHY_STATUS=500
	fi

	# echo status
	if [ $PUSHY_STATUS = 0 ]; then
		echo "GitPushy - Completed $DEPLOYMENT_RUN"
	else
		echo "GitPushy - Exited $DEPLOYMENT_RUN with status $PUSHY_STATUS"
	fi

	# return pushy status
	return $PUSHY_STATUS
}

gitpushy-push-branch() {
	# Export pushy variables to main environment
	export PUSHY_DEPLOY_DIR=""
	export PUSHY_BUILD_DIR="/tmp/pushy-$1-build.$RANDOM$RANDOM/"
	export PUSHY_STAGE_DIR="$HOME/pushy-staging-$PUSHY_REPO-$1/"
	export PUSHY_VERBOSE=0
	export PUSHY_STATUS=0
	export PUSHY_REMOTE=0
	export PUSHY_BRANCH="$1"
	export PUSHY_SERVER="$HOSTNAME"
	export PUSHY_TRIGGERS=()
	export PUSHY_TRIGGER=""
	export PUSHY_PORT=22
	export PUSHY_USER=$(whoami)
	export PUSHY_REPO="$PUSHY_REPO"

	# check if branch exists
	[ -z "$PUSHY_BRANCH" ] && "BRANCH was not passed to gitpushy-push-branch" && return 1
	[ ! -f $GIT_DIR/refs/heads/$PUSHY_BRANCH ] && echo "$PUSHY_BRANCH does not exist in $PUSHY_REPO" && return 1

	# check if this branch has gitpushy data
	[ ! -f $GIT_DIR/hooks/gitpushy-$PUSHY_BRANCH-branch ] && [ -z "$(gitpushy-script config main;gitpushy-script custom main)" ] && echo "NO PUSHY BRANCH" && return 0

	# remember current repo settings
	local REPO_DIR=$GIT_DIR
	local REPO_BARE=$PWD

	# make a switch to clean local clone
	gitpushy-clone-temp $PUSHY_BUILD_DIR

	[ $? != 0 ] && echo "GitPushy - Failed to clone repo to $PUSHY_BUILD_DIR" >&2 && return $?

	# reorient git
	export GIT_DIR=$PUSHY_BUILD_DIR/.git

	# Process GitPushy Branch Hooks
	if [ -f $REPO_BARE/hooks/gitpushy-$PUSHY_BRANCH-branch ]; then
		echo "GitPushy - Custom GitPushy Hook: pushy-$PUSHY_BRANCH-branch"

		# run branch hook
		(source $REPO_BARE/hooks/gitpushy-$PUSHY_BRANCH-branch 1> >(tee gitpushy-$PUSHY_BRANCH-branch.output) 2> >(tee gitpushy-$PUSHY_BRANCH-branch.error))

		# capture exit status
		PUSHY_STATUS=$?
		[ -s gitpushy-$PUSHY_BRANCH-branch.error ] && PUSHY_STATUS=500
	else
		# run main trigger
		gitpushy-trigger main

		# loop through addtional triggers
		[ $PUSHY_STATUS = 0 ] && for PUSHY_TRIGGER in ${PUSHY_TRIGGERS[@]}; do
			gitpushy-trigger $PUSHY_TRIGGER
		done
	fi

	# clean up after deploy
	gitpushy-clean-temp $PUSHY_BUILD_DIR

	# reset git orientation
	export GIT_DIR=$REPO_DIR
	cd $REPO_BARE

	return $PUSHY_STATUS
}

gitpushy-push-replicate() {
	[ -z "$1" ] && return 402
	[ "$(gitpushy-committer)" = "GitPushy" ] && return 401

	local SERVER=""

	for SERVER in $@; do
		if gitpushy-server-is-local $SERVER; then
			continue
		elif git status 1>/dev/null 2>/dev/null; then
			echo "GitPushy - Syncronizing $1"

			git remote add $1 ssh://$PUSHY_USER@$1:$PUSHY_PORT/$PUSHY_REPO
			git checkout -b $1 1>/dev/null 2>/dev/null
			git fetch $1 1>/dev/null 2>/dev/null

			if [ $? != 0 ]; then
				echo "GitPushy - Failed to fetch ssh://$PUSHY_USER@$1:$PUSHY_PORT/$PUSHY_REPO"
			elif git merge --no-commit $1/$PUSHY_BRANCH $1 1>/dev/null 2>/dev/null; then
				git commit --author="GitPushy <$PUSHY_USER@$PUSHY_SERVER>" --allow-empty -am "Auto-merged from $1 on $PUSHY_SERVER" 1>/dev/null 2>/dev/null
				git push $1 $1:$PUSHY_BRANCH 1>/dev/null 2>/dev/null

				if [ $? = 0 ]; then
					echo "GitPushy - Syncronization complete!"
				else
					echo "GitPushy - Failed syncronize to $1 with status $?"
				fi
			else
				git merge --abort 1>/dev/null 2>/dev/null

				echo "GitPushy - Cannot resolve merge conficts with remote $1 $PUSHY_BRANCH"
			fi

			git checkout $PUSHY_BRANCH 1>/dev/null 2>/dev/null
		fi
	done
}

gitpushy-clone-temp() {
    local CLONE_STATUS=0
	[ -z "$PUSHY_BRANCH" ] && PUSHY_BRANCH=$(gitpushy-branch-name)
	[ -z "$1" ] && echo "GitPushy - No build directory specified" && local CLONE_STATUS=404

	if [ $CLONE_STATUS = 0 ]; then
		# make a clean local clone
		(rm -rf $1; git clone -b $PUSHY_BRANCH . $1) # >/dev/null

		local CLONE_STATUS=${PIPESTATUS[0]}

		# switch to clone
		cd $1
	fi

	if [ $CLONE_STATUS != 0 ]; then
		echo "GitPushy - Exited cloning $1 with status $CLONE_STATUS"
	fi

	# return pushy status
	return $CLONE_STATUS
}

gitpushy-clean-temp() {
	local CLEAN_STATUS=0
	[ -z "$1" ] && echo "GitPushy - No build directory specified" && local CLEAN_STATUS=404

	if [ $CLEAN_STATUS = 0 ]; then
		(rm -rf $1) >/dev/null

		local CLEAN_STATUS=${PIPESTATUS[0]}

		# switch to clone
		[ -n "$PUSHY_BARE" ] && cd $PUSHY_BARE
	fi

	# echo status
	if [ $CLEAN_STATUS != 0 ]; then
		echo "GitPushy - Exited clean-up $1 with status $CLEAN_STATUS"
	fi

	# return pushy status
	return $CLEAN_STATUS
}

gitpushy-script() {
	[ -z "$PUSHY_BRANCH" ] && PUSHY_BRANCH=$(gitpushy-branch-name)

	gitpushy-cat .gitpushy-$1 .gitpushy-$1-$PUSHY_BRANCH

	[ -n "$2" ] && gitpushy-script $2-$1 ${@:3}
}

gitpushy-cat() {
	[ -z "$PUSHY_BRANCH" ] && PUSHY_BRANCH=$(gitpushy-branch-name)

	# cat files in repo
	grep -v "^\s*$" <(for file in $@; do
		git show refs/heads/$PUSHY_BRANCH:$file 2>/dev/null
	done)
}

gitpushy-init() {
	export PUSHY_REPO=""
	export PUSHY_BRANCH=""
	export PUSHY_BRANCHES=()

	[ -z "$PUSHY_REPO" ] && if [ $(git rev-parse --is-bare-repository) = true ]; then
		PUSHY_REPO=$(basename "$PWD")
		PUSHY_REPO=${PUSHY_REPO%.git}
	else
		PUSHY_REPO=$(basename $(readlink -nf "$PWD"/..))
	fi

	while read oldrev newrev refname; do
		PUSHY_BRANCHES+=($(git rev-parse --symbolic --abbrev-ref $refname))
	done

	OFS=$IFS;
	IFS=$'\n'
	PUSHY_BRANCHES=($(sort -u <<<"${PUSHY_BRANCHES[@]}"))
	IFS=$OFS;

	for PUSHY_BRANCH in ${PUSHY_BRANCHES[@]}; do
		gitpushy-push-branch $PUSHY_BRANCH
	done
}

gitpushy-committer() {
	git log -1|grep -Po "(?<=Author:\s).*(?=\s+\<)"
}

gitpushy-server-ip() {
	ping -c 1 $1 | grep -Po -m 1 '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}';
}

gitpushy-local-ips() {
	ifconfig | grep -Po '(?<=addr:)[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

gitpushy-in-array() {
	local x

	for x in "${@:2}"; do
		[ "$x" = "$1" ] && return 0
	done

	return 1
}

gitpushy-server-is-local() {
	if gitpushy-in-array "$(gitpushy-server-ip $1)" $(gitpushy-local-ips); then
		return 0
	fi

	return 1
}
