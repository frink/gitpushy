#!/bin/bash

# include GitPushy common functions
source $(dirname $0)/gitpushy-common

# gitpushy environment
export PUSHY_REPO="$(gitpushy-repo-name)"
export PUSHY_BRANCH="$1"
export PUSHY_TRIGGER=""
export PUSHY_TRIGGERS=()

# gitpushy build directives
export PUSHY_DEPLOY_HOTSWAP="-$(date +%Y%m%d-%H%M%S)"
export PUSHY_DEPLOY_ARCHIVE="~/$PUSHY_REPO-$(date +%Y%m%d-%H%M%S)"
export PUSHY_DEPLOY_DIR=""
export PUSHY_STAGE_DIR="~/pushy-staging-$PUSHY_REPO-$PUSHY_BRANCH"
export PUSHY_BUILD_DIR="/tmp/pushy-build-$PUSHY_REPO-$PUSHY_BRANCH-$(date +%Y%m%d-%H%M%S)-$RANDOM"
export PUSHY_BUILD_KEEP=""

# numeric switches
export PUSHY_VERBOSE=0
export PUSHY_REMOTE=0
export PUSHY_STATUS=0

# remote server definition
export PUSHY_SERVER="$HOSTNAME"
export PUSHY_PORT=22
export PUSHY_USER="$(whoami)"

# remote server definition
export PUSHY_SERVER="$HOSTNAME"
export PUSHY_PORT=22
export PUSHY_USER="$(whoami)"

# remember current repo settings
export OLD_GIT_DIR="$GIT_DIR"
export REPO_GIT="$(cd "$(git rev-parse --git-dir)"; pwd)"

# set GIT_DIR to PWD if not set
export GIT_DIR="$REPO_GIT"

# check if branch was passed
[ -z "$PUSHY_BRANCH" ] && echo "GitPushy - branch was not passed to gitpushy-push-branch" && return 500

# check if branch exists
[ ! -f "$REPO_GIT/refs/heads/$PUSHY_BRANCH" ] && echo "GitPushy - branch does not exist - $PUSHY_REPO:$PUSHY_BRANCH" && return 500

# prepare config script
PUSHY_CONFIG="$(gitpushy-script config main)"

# prepare custom script
PUSHY_CUSTOM="$(gitpushy-script custom main)"

# check if this branch has gitpushy data
[ ! -f "$REPO_GIT/hooks/gitpushy-$PUSHY_BRANCH-branch" ] && [ -z "$PUSHY_CONFIG$PUSHY_CUSTOM" ] && echo "No GitPushy for $PUSHY_REPO:$PUSHY_BRANCH" && return 0

# run config to set PUSHY_BUILD_DIR and PUSHY_BUILD_KEEP
eval "$( echo "$PUSHY_CONFIG" | grep '^PUSHY_BUILD_\(DIR\|KEEP\)=')"

# make a switch to clean local clone
[ $PUSHY_STATUS = 0 ] && gitpushy-clone-temp "$PUSHY_BUILD_DIR"
export CLONE_STATUS=$?

# report errors
[ $CLONE_STATUS != 0 ] && echo "GitPushy - Failed to clone repo to $PUSHY_BUILD_DIR" >&2 && PUSHY_STATUS=$CLONE_STATUS

# start GitPushy
gitpushy-trigger cron

# report errors
[ $PUSHY_STATUS != 0 ] && echo "GitPushy - Unsuccessful build for $PUSHY_BRANCH with status $PUSHY_STATUS" >&2

# is PUSHY_BUILD_KEEP specified
if [ -n "$PUSHY_BUILD_KEEP" ]; then
    echo "GitPushy - Keeping Dir: $PUSHY_BUILD_DIR"
else
    gitpushy-clean-temp $PUSHY_BUILD_DIR
fi

# switch to bare repo
[ -n "$OLD_PWD_DIR" ] && cd $OLD_PWD_DIR
[ $? != 0 ] && echo "GitPushy - Failed to find $OLD_PWD_DIR" >&2 && return $?

# reset git orientation
if [ -n "$OLD_GIT_DIR" ]; then
    export GIT_DIR="$OLD_GIT_DIR"
else
    unset GIT_DIR
fi
